import SE, { SED } from '../../../util/swagger_example.js';

// * Commercial Bank * //
export const pathCommercialBank = {
	'/commercial/bank': {
		get: {
			tags: ['commercial.bank'],
			summary: 'Get all banks',
			description: 'All banks',
			responses: {
				200: SE.response_schema_ref(200, 'commercial/bank'),
				405: SE.response(405),
				400: SE.response(400),
				404: SE.response(404),
			},
		},
		post: {
			tags: ['commercial.bank'],
			summary: 'Create a bank',
			description: 'Create a bank',
			requestBody: SE.requestBody_schema_ref('commercial/bank'),
			responses: {
				201: SE.response_schema_ref(201, 'commercial/bank'),
				405: SE.response(405),
				400: SE.response(400),
				404: SE.response(404),
			},
		},
	},

	'/commercial/bank/{uuid}': {
		get: {
			tags: ['commercial.bank'],
			summary: 'Get a bank',
			description: ' Get a bank by uuid',
			//operationId: "getBankByUuid",
			produces: ['application/json'],
			parameters: [
				SE.parameter_params('Get data using uuid', 'uuid', 'uuid'),
			],
			responses: {
				200: SE.response_schema_ref(200, 'commercial/bank'),
				405: SE.response(405),
				400: SE.response(400),
				404: SE.response(404),
			},
		},
		put: {
			tags: ['commercial.bank'],
			summary: 'Update a bank',
			description: 'Update a bank by uuid',
			//operationId: "updateBankByUuid",
			consume: ['application/json'],
			produces: ['application/json'],
			parameters: [
				SE.parameter_params('Update data using uuid', 'uuid', 'uuid'),
			],
			requestBody: SE.requestBody_schema_ref('commercial/bank'),
			responses: {
				200: SE.response_schema_ref(200, 'commercial/bank'),
				405: SE.response(405),
				400: SE.response(400),
				404: SE.response(404),
			},
		},
		delete: {
			tags: ['commercial.bank'],
			summary: 'Delete a bank',
			description: 'Delete a bank by uuid',
			//operationId: "deleteBankByUuid",
			produces: ['application/json'],
			parameters: [
				SE.parameter_params('Delete data using uuid', 'uuid', 'uuid'),
			],
			responses: {
				200: SE.response(200),
				405: SE.response(405),
				400: SE.response(400),
				404: SE.response(404),
			},
		},
	},
};

// * Commercial LC * //

export const pathCommercialLc = {
	'/commercial/lc': {
		get: {
			tags: ['commercial.lc'],
			summary: 'Get all lcs',
			description: 'All lcs',
			responses: {
				200: SE.response_schema('200', {
					uuid: SE.uuid('igD0v9DIJQhJeet'),
					pi_ids: SE.array(SE.string('PI24-0001')),
					id: SE.integer(1),
					file_number: SE.string('LC24-0001'),
					party_uuid: SE.uuid('igD0v9DIJQhJeet'),
					party_name: SE.string('ABC'),
					total_value: SE.number(12.3456),
					lc_number: SE.string('123456'),
					lc_date: SE.string('2021-12-12'),
					payment_value: SE.number(12.3456),
					payment_date: SE.date_time(),
					ldbc_fdc: SE.string('ldbc_fdc'),
					acceptance_date: SE.date_time(),
					maturity_date: SE.date_time(),
					commercial_executive: SE.string('commercial_executive'),
					party_bank: SE.string('party_bank'),
					production_complete: SE.integer(1),
					lc_cancel: SE.integer(1),
					handover_date: SE.date_time(),
					document_receive_date: SE.date_time(),
					shipment_date: SE.date_time(),
					expiry_date: SE.date_time(),
					ud_no: SE.string('ud_no'),
					ud_received: SE.string('ud_received'),
					at_sight: SE.string('at_sight'),
					amd_date: SE.date_time(),
					amd_count: SE.integer(1),
					problematical: SE.integer(1),
					epz: SE.integer(1),
					created_by: SE.uuid('igD0v9DIJQhJeet'),
					created_by_name: SE.string('John Doe'),
					created_at: SE.date_time(),
					update_at: SE.date_time(),
					remarks: SE.string('remarks'),
				}),
			},
		},
		post: {
			tags: ['commercial.lc'],
			summary: 'Create a lc',
			description: 'Create a lc',
			consumes: ['application/json'],
			produces: ['application/json'],
			requestBody: SE.requestBody_schema_ref('commercial/lc'),
			responses: {
				200: SE.response_schema_ref(200, 'commercial/lc'),
				405: SE.response(405),
				400: SE.response(400),
				404: SE.response(404),
			},
		},
	},

	'/commercial/lc/{uuid}': {
		get: {
			tags: ['commercial.lc'],
			summary: 'Get a lc',
			description: ' Get a lc by uuid',
			//operationId: "getLcByUuid",
			produces: ['application/json'],
			parameters: [
				SE.parameter_params('Get data using uuid', 'uuid', 'uuid'),
			],
			responses: {
				200: SE.response_schema('200', {
					uuid: SE.uuid('igD0v9DIJQhJeet'),
					pi_ids: SE.array(SE.string('PI24-0001')),
					id: SE.integer(1),
					file_number: SE.string('LC24-0001'),
					party_uuid: SE.uuid('igD0v9DIJQhJeet'),
					party_name: SE.string('ABC'),
					total_value: SE.number(12.3456),
					lc_number: SE.string('123456'),
					lc_date: SE.string('2021-12-12'),
					payment_value: SE.number(12.3456),
					payment_date: SE.date_time(),
					ldbc_fdc: SE.string('ldbc_fdc'),
					acceptance_date: SE.date_time(),
					maturity_date: SE.date_time(),
					commercial_executive: SE.string('commercial_executive'),
					party_bank: SE.string('party_bank'),
					production_complete: SE.integer(1),
					lc_cancel: SE.integer(1),
					handover_date: SE.date_time(),
					document_receive_date: SE.date_time(),
					shipment_date: SE.date_time(),
					expiry_date: SE.date_time(),
					ud_no: SE.string('ud_no'),
					ud_received: SE.string('ud_received'),
					at_sight: SE.string('at_sight'),
					amd_date: SE.date_time(),
					amd_count: SE.integer(1),
					problematical: SE.integer(1),
					epz: SE.integer(1),
					created_by: SE.uuid('igD0v9DIJQhJeet'),
					created_by_name: SE.string('John Doe'),
					created_at: SE.date_time(),
					update_at: SE.date_time(),
					remarks: SE.string('remarks'),
				}),
				405: SE.response(405),
				400: SE.response(400),
				404: SE.response(404),
			},
		},
		put: {
			tags: ['commercial.lc'],
			summary: 'Update a lc',
			description: 'Update a lc by uuid',
			//operationId: "updateLcByUuid",
			consume: ['application/json'],
			produces: ['application/json'],
			parameters: [
				SE.parameter_params('Get data using uuid', 'uuid', 'uuid'),
			],
			requestBody: SE.requestBody_schema_ref('commercial/lc'),
			responses: {
				200: SE.response_schema_ref(200, 'commercial/lc'),
				400: SE.response(400),
				404: SE.response(404),
				405: SE.response(405),
			},
		},
		delete: {
			tags: ['commercial.lc'],
			summary: 'Delete a lc',
			description: 'Delete a lc by uuid',
			//operationId: "deleteLcByUuid",
			produces: ['application/json'],
			parameters: [
				SE.parameter_params('Get data using uuid', 'uuid', 'uuid'),
			],
			responses: {
				200: SE.response(200),
				400: SE.response(400),
				404: SE.response(404),
			},
		},
	},
	'/commercial/lc-pi/by/{lc_uuid}': {
		get: {
			tags: ['commercial.lc'],
			summary: 'Get a lc by lc_uuid',
			description: ' Get a lc by lc_uuid',
			//operationId: "getLcByUuid",
			produces: ['application/json'],
			parameters: [
				SE.parameter_params('Get data using uuid', 'lc_uuid', 'uuid'),
			],
			responses: {
				200: SE.response_schema('200', {
					uuid: SE.uuid('igD0v9DIJQhJeet'),
					pi_ids: SE.array(SE.uuid('igD0v9DIJQhJeet')),
					id: SE.integer(1),
					file_number: SE.string('LC24-0001'),
					party_uuid: SE.uuid(),
					party_name: SE.string('ABC'),
					total_value: SE.number(12.3456),
					lc_number: SE.number(123456),
					lc_date: SE.date_time(),
					payment_value: SE.number(12.3456),
					payment_date: SE.date_time(),
					ldbc_fdc: SE.string('ldbc_fdc'),
					acceptance_date: SE.date_time(),
					maturity_date: SE.date_time(),
					commercial_executive: SE.string('John Doe'),
					party_bank: SE.string('Bangladesh Bank'),
					production_complete: SE.integer(1),
					lc_cancel: SE.integer(1),
					handover_date: SE.date_time(),
					document_receive_date: SE.date_time(),
					shipment_date: SE.date_time(),
					expiry_date: SE.date_time(),
					ud_no: SE.string('ud_no'),
					ud_received: SE.integer(1),
					at_sight: SE.string('at_sight'),
					amd_date: SE.date_time(),
					amd_count: SE.integer(1),
					problematical: SE.integer(1),
					epz: SE.integer(1),
					created_by: SE.uuid(),
					created_by_name: SE.string('John Doe'),
					created_at: SE.date_time(),
					update_at: SE.date_time(),
					remarks: SE.string('remarks'),
					pi: SE.sub_response_schema({
						uuid: SE.uuid(),
						id: SE.string('PI24-0001'),
						lc_uuid: SE.uuid(),
						lc_number: SE.number(123456),
						order_info_uuids: SE.array([SE.uuid()]),
						marketing_uuid: SE.uuid(),
						marketing_name: SE.string('marketing'),
						pi_ids: SE.array([SE.uuid()]),
						party_uuid: SE.uuid(),
						party_name: SE.string('party'),
						total_value: SE.number(12.3456),
						merchandiser_uuid: SE.uuid(),
						merchandiser_name: SE.string('merchandiser'),
						factory_uuid: SE.uuid(),
						factory_name: SE.string('ABC'),
						bank_uuid: SE.uuid(),
						bank_name: SE.string('Bangladesh Bank'),
						bank_swift_code: SE.string('BB'),
						bank_address: SE.string('address'),
						factory_address: SE.string('address'),
						validity: SE.date_time(),
						payment: SE.string('paid'),
						created_by: SE.uuid(),
						created_by_name: SE.string('John Doe'),
						created_at: SE.date_time(),
						update_at: SE.date_time(),
						remarks: SE.string('remarks'),
					}),
				}),
			},
		},
	},
	'/commercial/lc/by/lc-number/{lc_number}': {
		get: {
			tags: ['commercial.lc'],
			summary: 'Get a lc by lc_number',
			description: ' Get a lc by lc_number',
			//operationId: "getLcByUuid",
			produces: ['application/json'],
			parameters: [
				SE.parameter_params(
					'Get data using uuid',
					'lc_number',
					'string'
				),
			],
			responses: {
				200: SE.response_schema('200', {
					uuid: SE.uuid(),
					pi_ids: SE.array(SE.uuid()),
					id: SE.integer(1),
					file_number: SE.string('LC24-0001'),
					party_uuid: SE.uuid(),
					party_name: SE.string('ABC'),
					total_value: SE.number(12.3456),
					lc_number: SE.number(123456),
					lc_date: SE.date_time(),
					payment_value: SE.number(12.3456),
					payment_date: SE.date_time(),
					ldbc_fdc: SE.string('ldbc_fdc'),
					acceptance_date: SE.date_time(),
					maturity_date: SE.date_time(),
					commercial_executive: SE.string('John Doe'),
					party_bank: SE.string('Bangladesh Bank'),
					production_complete: SE.integer(1),
					lc_cancel: SE.integer(1),
					handover_date: SE.date_time(),
					document_receive_date: SE.date_time(),
					shipment_date: SE.date_time(),
					expiry_date: SE.date_time(),
					ud_no: SE.string('ud_no'),
					ud_received: SE.integer(1),
					at_sight: SE.string('at_sight'),
					amd_date: SE.date_time(),
					amd_count: SE.integer(1),
					problematical: SE.integer(1),
					epz: SE.integer(1),
					created_by: SE.uuid(),
					created_by_name: SE.string('John Doe'),
					created_at: SE.date_time(),
					update_at: SE.date_time(),
					remarks: SE.string('remarks'),
				}),
			},
		},
	},
};

// * Commercial Pi* //

export const pathCommercialPi = {
	'/commercial/pi': {
		get: {
			tags: ['commercial.pi'],
			summary: 'Get all pis',
			description: 'All pis',
			responses: {
				200: SE.response_schema('200', {
					uuid: SE.uuid(),
					id: SE.integer(1),
					lc_uuid: SE.uuid(),
					lc_number: SE.number(123456),
					order_info_uuids: SE.array([SE.uuid()]),
					marketing_uuid: SE.uuid(),
					marketing_name: SE.string('marketing'),
					party_uuid: SE.uuid(),
					party_name: SE.string('party'),
					merchandiser_uuid: SE.uuid(),
					merchandiser_name: SE.string('merchandiser'),
					factory_uuid: SE.uuid(),
					factory_name: SE.string('ABC'),
					bank_uuid: SE.uuid(),
					bank_name: SE.string('Bangladesh Bank'),
					bank_swift_code: SE.string('BB'),
					bank_address: SE.string('address'),
					factory_address: SE.string('address'),
					validity: SE.date_time(),
					payment: SE.string('paid'),
					created_by: SE.uuid(),
					created_by_name: SE.string('John Doe'),
					created_at: SE.date_time(),
					update_at: SE.date_time(),
					remarks: SE.string('remarks'),
				}),
			},
		},
		post: {
			tags: ['commercial.pi'],
			summary: 'Create a pi',
			description: 'Create a pi',
			// operationId: "addPet",
			consumes: ['application/json'],
			produces: ['application/json'],
			requestBody: SE.requestBody_schema_ref('commercial/pi'),
			responses: {
				200: SE.response_schema_ref(200, 'commercial/pi'),
				405: SE.response(405),
			},
		},
	},

	'/commercial/pi/{uuid}': {
		get: {
			tags: ['commercial.pi'],
			summary: 'Get a pi',
			description: ' Get a pi by uuid',
			//operationId: "getPet",
			produces: ['application/json'],
			parameters: [
				SE.parameter_params('Get data using uuid', 'uuid', 'uuid'),
			],
			responses: {
				200: SE.response_schema_ref(200, 'commercial/pi'),
				400: SE.response(400),
				404: SE.response(404),
			},
		},
		put: {
			tags: ['commercial.pi'],
			summary: 'Update a pi',
			description: 'Update a pi by uuid',
			//operationId: "updatePet",
			consume: ['application/json'],
			produces: ['application/json'],
			parameters: [
				SE.parameter_params('Update data using uuid', 'uuid', 'uuid'),
			],
			requestBody: SE.requestBody_schema_ref('commercial/pi'),
			responses: {
				200: SE.response_schema_ref(200, 'commercial/pi'),
				400: SE.response(400),
				404: SE.response(404),
				405: SE.response(405),
			},
		},
		delete: {
			tags: ['commercial.pi'],
			summary: 'Delete a pi',
			description: 'Delete a pi by uuid',
			//operationId: "deletePet",
			produces: ['application/json'],
			parameters: [
				SE.parameter_params('Delete data using uuid', 'uuid', 'uuid'),
			],
			responses: {
				200: SE.response(200),
				400: SE.response(400),
				404: SE.response(404),
			},
		},
	},
	'/commercial/pi/details/{pi_uuid}': {
		get: {
			tags: ['commercial.pi'],
			summary: 'Get a pi details by pi_uuid',
			description: ' Get a pi details by pi_uuid',
			//operationId: "getPet",
			produces: ['application/json'],
			parameters: [
				SE.parameter_params('Get data using uuid', 'pi_uuid', 'uuid'),
			],
			responses: {
				200: SE.response_schema('200', {
					uuid: SE.uuid(),
					id: SE.string('PI24-0001'),
					lc_uuid: SE.uuid(),
					lc_number: SE.number(123456),
					order_info_uuids: SE.array([SE.uuid()]),
					marketing_uuid: SE.uuid(),
					marketing_name: SE.string('marketing'),
					party_uuid: SE.uuid(),
					party_name: SE.string('party'),
					merchandiser_uuid: SE.uuid(),
					merchandiser_name: SE.string('merchandiser'),
					factory_uuid: SE.uuid(),
					factory_name: SE.string('ABC'),
					bank_uuid: SE.uuid(),
					bank_name: SE.string('Bangladesh Bank'),
					bank_swift_code: SE.string('BB'),
					bank_address: SE.string('address'),
					factory_address: SE.string('address'),
					validity: SE.date_time(),
					payment: SE.string('paid'),
					created_by: SE.uuid(),
					created_by_name: SE.string('John Doe'),
					created_at: SE.date_time(),
					update_at: SE.date_time(),
					remarks: SE.string('remarks'),
					pi_entry: SE.sub_response_schema({
						uuid: SE.uuid(),
						pi_uuid: SE.uuid(),
						pi_number: SE.string('PI24-0001'),
						pi_date: SE.date_time(),
						amount: SE.number(123456),
						created_by: SE.uuid(),
						created_by_name: SE.string('John Doe'),
						created_at: SE.date_time(),
						update_at: SE.date_time(),
						remarks: SE.string('remarks'),
					}),
				}),
				400: SE.response(400),
				404: SE.response(404),
			},
		},
	},
	'/commercial/pi-lc-uuid/{pi_uuid}': {
		put: {
			tags: ['commercial.pi'],
			summary: 'Update a pi put lc',
			description: 'Update a pi put lc by pi_uuid',
			//operationId: "updatePet",
			consume: ['application/json'],
			produces: ['application/json'],
			parameters: [
				SE.parameter_params(
					'Update data using uuid',
					'pi_uuid',
					'uuid'
				),
			],
			requestBody: SE.requestBody_schema_ref('commercial/pi'),
			responses: {
				200: SE.response_schema_ref(200, 'commercial/pi'),
				400: SE.response(400),
				404: SE.response(404),
				405: SE.response(405),
			},
		},
	},
	'/commercial/pi-lc-null/{pi_uuid}': {
		put: {
			tags: ['commercial.pi'],
			summary: 'Update a pi put lc to null',
			description: 'Update a pi put lc to null by pi_uuid',
			//operationId: "updatePet",
			consume: ['application/json'],
			produces: ['application/json'],
			parameters: [
				SE.parameter_params(
					'Update data using uuid',
					'pi_uuid',
					'uuid'
				),
			],
			responses: {
				200: SE.response(200),
				400: SE.response(400),
				404: SE.response(404),
				405: SE.response(405),
			},
		},
	},
	'/commercial/pi-lc/{lc_uuid}': {
		get: {
			tags: ['commercial.pi'],
			summary: 'Get a pi by lc_uuid',
			description: ' Get a pi by lc_uuid',
			//operationId: "getPet",
			produces: ['application/json'],
			parameters: [
				SE.parameter_params('Get data using uuid', 'lc_uuid', 'uuid'),
			],
			responses: {
				200: SE.response_schema('200', {
					uuid: SE.uuid(),
					id: SE.string('PI24-0001'),
					lc_uuid: SE.uuid(),
					lc_number: SE.number(123456),
					order_info_uuids: SE.array([SE.uuid()]),
					marketing_uuid: SE.uuid(),
					marketing_name: SE.string('marketing'),
					party_uuid: SE.uuid(),
					party_name: SE.string('party'),
					merchandiser_uuid: SE.uuid(),
					merchandiser_name: SE.string('merchandiser'),
					factory_uuid: SE.uuid(),
					factory_name: SE.string('ABC'),
					bank_uuid: SE.uuid(),
					bank_name: SE.string('Bangladesh Bank'),
					bank_swift_code: SE.string('BB'),
					bank_address: SE.string('address'),
					factory_address: SE.string('address'),
					validity: SE.date_time(),
					payment: SE.string('paid'),
					created_by: SE.uuid(),
					created_by_name: SE.string('John Doe'),
					created_at: SE.date_time(),
					update_at: SE.date_time(),
					remarks: SE.string('remarks'),
				}),
				400: SE.response(400),
				404: SE.response(404),
			},
		},
	},
	'/commercial/pi-uuid/{pi_id}': {
		get: {
			tags: ['commercial.pi'],
			summary: 'Get a pi by pi_id',
			description: ' Get a pi by pi_id',
			//operationId: "getPet",
			produces: ['application/json'],
			parameters: [
				SE.parameter_params(
					'Pi to get',
					'pi_id',
					'string',
					'PI24-0001'
				),
			],
			responses: {
				200: SE.response_schema(200, {
					uuid: SE.uuid(),
				}),
			},
		},
	},
	'/commercial/pi/details/by/pi-id/{pi_id}': {
		get: {
			tags: ['commercial.pi'],
			summary: 'Get a pi details by pi_id',
			description: ' Get a pi details by pi_id',
			//operationId: "getPet",
			produces: ['application/json'],
			parameters: [
				SE.parameter_params(
					'Pi to get',
					'pi_id',
					'string',
					'PI24-0001'
				),
			],
			responses: {
				200: SE.response_schema('200', {
					uuid: SE.uuid(),
					id: SE.string('PI24-0001'),
					lc_uuid: SE.uuid(),
					lc_number: SE.number(123456),
					order_info_uuids: SE.array([SE.uuid()]),
					marketing_uuid: SE.uuid(),
					marketing_name: SE.string('marketing'),
					party_uuid: SE.uuid(),
					party_name: SE.string('party'),
					merchandiser_uuid: SE.uuid(),
					merchandiser_name: SE.string('merchandiser'),
					factory_uuid: SE.uuid(),
					factory_name: SE.string('ABC'),
					bank_uuid: SE.uuid(),
					bank_name: SE.string('Bangladesh Bank'),
					bank_swift_code: SE.string('BB'),
					bank_address: SE.string('address'),
					factory_address: SE.string('address'),
					validity: SE.date_time(),
					payment: SE.string('paid'),
					created_by: SE.uuid(),
					created_by_name: SE.string('John Doe'),
					created_at: SE.date_time(),
					update_at: SE.date_time(),
					remarks: SE.string('remarks'),
				}),
			},
		},
	},
};

// * Commercial Pi_Entry* //

export const pathCommercialPiEntry = {
	'/commercial/pi-entry': {
		get: {
			tags: ['commercial.pi_entry'],
			summary: 'Get all pi_entries',
			description: 'All pi_entries',
			responses: {
				200: SE.response_schema_ref(200, 'commercial/pi_entry'),
			},
		},
		post: {
			tags: ['commercial.pi_entry'],
			summary: 'Create a pi_entry',
			description: 'Create a pi_entry',
			consumes: ['application/json'],
			produces: ['application/json'],
			requestBody: SE.requestBody_schema_ref('commercial/pi_entry'),
			responses: {
				200: SE.response_schema_ref(200, 'commercial/pi_entry'),
				405: SE.response(405),
			},
		},
	},

	'/commercial/pi-entry/{uuid}': {
		get: {
			tags: ['commercial.pi_entry'],
			summary: 'Get a pi_entry',
			description: ' Get a pi_entry by uuid',
			//operationId: "getPiEntryByUuid",
			produces: ['application/json'],
			parameters: [
				SE.parameter_params('Get data using uuid', 'uuid', 'uuid'),
			],
			responses: {
				200: SE.response_schema_ref(200, 'commercial/pi_entry'),
				400: SE.response(400),
				404: SE.response(404),
			},
		},
		put: {
			tags: ['commercial.pi_entry'],
			summary: 'Update a pi_entry',
			description: 'Update a pi_entry by uuid',
			//operationId: "updatePiEntryByUuid",
			consume: ['application/json'],
			produces: ['application/json'],
			parameters: [
				SE.parameter_params('Update data using uuid', 'uuid', 'uuid'),
			],
			requestBody: SE.requestBody_schema_ref('commercial/pi_entry'),
			responses: {
				200: SE.response_schema_ref(200, 'commercial/pi_entry'),
				400: SE.response(400),
				404: SE.response(404),
				405: SE.response(405),
			},
		},
		delete: {
			tags: ['commercial.pi_entry'],
			summary: 'Delete a pi_entry',
			description: 'Delete a pi_entry by uuid',
			//operationId: "deletePiEntryByUuid",
			produces: ['application/json'],
			parameters: [
				SE.parameter_params('Delete data using uuid', 'uuid', 'uuid'),
			],
			responses: {
				200: SE.response(200),
				400: SE.response(400),
				404: SE.response(404),
			},
		},
	},
	'/commercial/pi-entry/by/{pi_uuid}': {
		get: {
			tags: ['commercial.pi_entry'],
			summary: 'Get a pi_entry by pi_uuid',
			description: ' Get a pi_entry by pi_uuid',
			//operationId: "getPet",
			produces: ['application/json'],
			parameters: [
				SE.parameter_params('Get data using uuid', 'pi_uuid', 'uuid'),
			],
			responses: {
				200: SE.response_schema(200, {
					uuid: SE.uuid(),
					pi_uuid: SE.uuid(),
					pi_number: SE.number(123456),
					pi_date: SE.date_time(),
					amount: SE.number(12.3456),
					created_by: SE.uuid(),
					created_by_name: SE.string('John Doe'),
					created_at: SE.date_time(),
					update_at: SE.date_time(),
					remarks: SE.string('remarks'),
				}),
				400: SE.response(400),
				404: SE.response(404),
			},
		},
	},
	'/commercial/pi-entry/details/by/{order_info_uuid}': {
		get: {
			tags: ['commercial.pi_entry'],
			summary: 'Get a pi_entry by order_info_uuid',
			description: ' Get a pi_entry by order_info_uuid',
			//operationId: "getPet",
			produces: ['application/json'],
			parameters: [
				SE.parameter_params(
					'Get data using uuid',
					'order_info_uuid',
					'uuid'
				),
			],
			responses: {
				200: SE.response_schema(200, {
					uuid: SE.uuid(),
					sfg_uuid: SE.uuid(),
					order_info_uuid: SE.uuid(),
					order_number: SE.string('Z24-0001'),
					item_description: SE.string('NM-8-OE-RP'),
					style: SE.string('St-1'),
					color: SE.string('Red'),
					size: SE.number(10),
					quantity: SE.number(100),
					given_pi_quantity: SE.number(100),
					max_quantity: SE.number(100),
					pi_quantity: SE.number(100),
					balance_quantity: SE.number(100),
					is_checked: SE.boolean(true),
				}),
				400: {
					description: 'Invalid UUID supplied',
				},
				404: {
					description: 'Pi not found',
				},
			},
		},
	},
	'/commercial/pi/details/by/order-info-ids/{order_info_uuids}/{party_uuid}/{marketing_uuid}':
		{
			get: {
				tags: ['commercial.pi_entry'],
				summary: 'Get a pi_entry by order_info_uuids',
				description: ' Get a pi_entry by order_info_uuids',
				//operationId: "getPet",
				produces: ['application/json'],
				parameters: [
					SE.parameter_params(
						'Get data using uuid',
						'order_info_uuids',
						'uuid'
					),
					SE.parameter_params(
						'Get data using uuid',
						'party_uuid',
						'uuid'
					),
					SE.parameter_params(
						'Get data using uuid',
						'marketing_uuid',
						'uuid'
					),
				],
				responses: {
					200: SE.response_schema(200, {
						uuid: SE.uuid(),
						sfg_uuid: SE.uuid(),
						order_info_uuid: SE.uuid(),
						order_number: SE.string('Z24-0001'),
						item_description: SE.string('NM-8-OE-RP'),
						style: SE.string('St-1'),
						color: SE.string('Red'),
						size: SE.number(10),
						quantity: SE.number(100),
						given_pi_quantity: SE.number(100),
						max_quantity: SE.number(100),
						pi_quantity: SE.number(100),
						balance_quantity: SE.number(100),
						is_checked: SE.boolean(true),
					}),
					400: SE.response(400),
					404: SE.response(404),
				},
			},
		},
};

export const pathCommercial = {
	...pathCommercialBank,
	...pathCommercialLc,
	...pathCommercialPi,
	...pathCommercialPiEntry,
};
